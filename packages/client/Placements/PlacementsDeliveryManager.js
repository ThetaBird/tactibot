const arrow = "⮞";
const { getImageBuffer } = require("./PlacementsImageManager");
const { getEmbed, getAttachment } = require("../DeliveryUtil");
const superScriptNum = [
  "⁽⁰⁾",
  "⁽¹⁾",
  "⁽²⁾",
  "⁽³⁾",
  "⁽⁴⁾",
  "⁽⁵⁾",
  "⁽⁶⁾",
  "⁽⁷⁾",
  "⁽⁸⁾",
];
function PlacementsDeliveryManager(tactiClan) {
  this.tactiClan = tactiClan;

  this.PPDM = null; //Set to proper PPDM object in manage()
  this.manage = (placements, parsedOptions, specificMovements) => {
    return manageDelivery(this, placements, parsedOptions, specificMovements);
  };

  this.text = () => {
    return this.PPDM.fullEmbed();
  };
  this.sText = () => {
    return this.PPDM.splitEmbed();
  };
  this.rText = () => {
    return this.PPDM.rawText();
  };
  this.image = () => {
    return this.PPDM.imageEmbed();
  };
}

module.exports = { PlacementsDeliveryManager };

const manageDelivery = (
  manager,
  placements,
  parsedOptions,
  specificMovements = []
) => {
  manager.PPDM = new PrimaryPlacementsDeliveryManager(
    placements,
    parsedOptions,
    specificMovements
  );

  switch (parsedOptions.responseFormat) {
    case "text":
    case "sText":
    case "rText":
    case "image":
      deliveryCall = manager[parsedOptions.responseFormat];
      break;
    default:
      throw { name: "Error: Invalid Delivery Format" };
  }

  const deliveryResponse = deliveryCall();

  if (parsedOptions.tactiClan["placementPreferences"]["show_movements"]) {
    const deliveryMovements = createAllMovementsText(placements, parsedOptions);
    if (!deliveryMovements) return deliveryResponse;
    //Object.assign(deliveryResponse, deliveryMovements);
    deliveryResponse.followUp = deliveryResponse.followUp
      ? [...deliveryResponse.followUp, deliveryMovements]
      : [deliveryMovements];
  }

  return deliveryResponse;
};

const createAllMovementsText = (totalPlacements, parsedOptions) => {
  const { afterText } = parsedOptions;
  let displayMovements = [];
  const lastNonNullKey = Object.keys(totalPlacements)
    .reverse()
    .find((key) => totalPlacements[key].mission != null);

  for (const missionPlacementNum in totalPlacements) {
    if (missionPlacementNum == lastNonNullKey) continue;

    const missionPlacements = totalPlacements[missionPlacementNum];
    if (
      !missionPlacements.mission ||
      !missionPlacements.displayOperatorMovements
    )
      continue;

    const { num, displayMissions, displayOperatorMovements } =
      missionPlacements;
    if (!displayOperatorMovements.length) continue;

    let displayMovement = [];
    displayMovement.push(
      `> ${afterText} **${superScriptNum[num]} ${displayMissions}:**`
    );
    for (const movement of displayOperatorMovements) {
      const { missionNum, displayReceiverMission, displayMovedOperators } =
        movement;
      displayMovement.push(
        `> **${
          superScriptNum[missionNum + 1]
        } ${displayReceiverMission}** ← \` ${displayMovedOperators.join(
          ", "
        )} \``
      );
    }
    displayMovement.push("");

    displayMovements.push(displayMovement.join("\n"));
  }
  return displayMovements.length
    ? {
        content: displayMovements.join("\n"),
      }
    : null;
};

const getSpecificMovementsText = (specificMovements, totalPlacements) => {
  let specificMovementsText = "";
  for (const repositionMission of specificMovements) {
    if (!repositionMission) continue;
    const { repositionNum, operators } = repositionMission;
    const repositionMissionName =
      totalPlacements[repositionNum].displayMissions;
    specificMovementsText += `**${
      superScriptNum[repositionNum + 1]
    }${repositionMissionName}** ← \`${operators
      .map((op) => op.charAt(0).toUpperCase() + op.slice(1))
      .join(", ")}\`\n`;
  }
  return specificMovementsText;
};

const getGenEmbed = ({
  clan_color,
  callName,
  displayText,
  clan_tag,
  clan_name,
  description,
  imageUrl,
}) => {
  const genEmbedObj = {
    color: clan_color,
    title:
      callName == "generate"
        ? `${displayText}`
        : `[${clan_tag}] ${clan_name} — ${displayText}`,
    description,
    //thumbnail:"https://i.ibb.co/KGXQWnp/Testing-PFP.png"
  };
  const genEmbed = getEmbed(genEmbedObj);
  if (imageUrl) genEmbed.setImage(`attachment://${imageUrl}`);

  return genEmbed;
};

function PrimaryPlacementsDeliveryManager(
  totalPlacements,
  parsedOptions,
  specificMovements
) {
  const { userId, callName, displayText } = parsedOptions;
  const tactiClan = parsedOptions.tactiClan || {};

  const { clan_color, custom_message } = tactiClan.displayPreferences;
  const { clan_tag, clan_name } = tactiClan.clanData;

  let description = `| Generated By <@${userId}> |\n\n`;

  const supplementalText =
    (custom_message ? custom_message + "\n" : "") +
    (!!specificMovements
      ? getSpecificMovementsText(specificMovements, totalPlacements)
      : "");

  const content = supplementalText ? { content: supplementalText } : {};

  this.fullEmbed = () => {
    for (const missionPlacementNum in totalPlacements) {
      const missionPlacements = totalPlacements[missionPlacementNum];
      if (!missionPlacements.mission) continue;
      const { num, displayMissions, displayOperators } = missionPlacements;

      const missionLine = `**[ ${num} ] ${displayMissions}** \n`;

      description += missionLine;
      description += `${arrow} \` ${displayOperators.join(", ")} \`\n\n`;
    }
    const genEmbed = getGenEmbed({
      clan_color,
      callName,
      displayText,
      clan_tag,
      clan_name,
      description,
    });

    return { initial: { ...content, embeds: [genEmbed] } };
  };

  this.imageEmbed = () => {
    const imageUrl = "placements.png";
    const imageBuffer = getImageBuffer(totalPlacements, parsedOptions);
    const attachment = getAttachment(imageBuffer, imageUrl);
    const genEmbed = getGenEmbed({
      clan_color,
      callName,
      displayText,
      clan_tag,
      clan_name,
      description,
      imageUrl,
    });

    return { initial: { ...content, embeds: [genEmbed], files: [attachment] } };
  };

  this.splitEmbed = () => {
    let followUp = [];
    for (const missionPlacementNum in totalPlacements) {
      let followUpContent = "";
      const missionPlacements = totalPlacements[missionPlacementNum];
      if (!missionPlacements.mission) continue;
      const { num, displayMissions, displayOperators } = missionPlacements;

      const missionLine = `**[ ${num} ] ${displayMissions}:**  `;

      followUpContent += missionLine;
      followUpContent += `\` ${displayOperators.join(", ")} \``;
      followUp.push(followUpContent);
    }
    const genEmbed = getGenEmbed({
      clan_color,
      callName,
      displayText,
      clan_tag,
      clan_name,
      description,
    });
    return { initial: { ...content, embeds: [genEmbed] }, followUp };
  };

  this.rawText = () => {
    description = custom_message ? `${custom_message}\n\n` : "";
    description +=
      (callName == "generate"
        ? `**${displayText}**`
        : `**[${clan_tag}] ${clan_name} — ${displayText}**`) + `\n`;
    description += `| Generated By <@${userId}> |\n\n`;

    for (const missionPlacementNum in totalPlacements) {
      const missionPlacements = totalPlacements[missionPlacementNum];
      if (!missionPlacements.mission) continue;
      const { num, displayMissions, displayOperators } = missionPlacements;

      const missionLine = `**[ ${num} ] ${displayMissions}** \n`;

      description += missionLine;
      description += `\`${arrow}  ${displayOperators.join(", ")}\`\n\n`;
    }

    return { initial: { content: description } };
  };
}
